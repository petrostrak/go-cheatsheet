// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: person.sql

package db

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :execresult
INSERT INTO person (
    id,
    kind,
    persons_name,
    origins,
    programming_languages,
    tools,
    linkedin,
    github,
    personal,
    foreign_languages,
    fav_food,
    fav_drink,
    fav_programming_language,
    thinking_about,
    hobbies
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePersonParams struct {
	ID                     int64  `json:"id"`
	Kind                   string `json:"kind"`
	PersonsName            string `json:"persons_name"`
	Origins                string `json:"origins"`
	ProgrammingLanguages   string `json:"programming_languages"`
	Tools                  string `json:"tools"`
	Linkedin               string `json:"linkedin"`
	Github                 string `json:"github"`
	Personal               string `json:"personal"`
	ForeignLanguages       string `json:"foreign_languages"`
	FavFood                string `json:"fav_food"`
	FavDrink               string `json:"fav_drink"`
	FavProgrammingLanguage string `json:"fav_programming_language"`
	ThinkingAbout          string `json:"thinking_about"`
	Hobbies                string `json:"hobbies"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPerson,
		arg.ID,
		arg.Kind,
		arg.PersonsName,
		arg.Origins,
		arg.ProgrammingLanguages,
		arg.Tools,
		arg.Linkedin,
		arg.Github,
		arg.Personal,
		arg.ForeignLanguages,
		arg.FavFood,
		arg.FavDrink,
		arg.FavProgrammingLanguage,
		arg.ThinkingAbout,
		arg.Hobbies,
	)
}

const deletePersonById = `-- name: DeletePersonById :exec
DELETE FROM person
WHERE person.id = ?
`

func (q *Queries) DeletePersonById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePersonById, id)
	return err
}

const getPersonById = `-- name: GetPersonById :one
SELECT persons_name FROM person
WHERE person.id = ? LIMIT 1
`

func (q *Queries) GetPersonById(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPersonById, id)
	var persons_name string
	err := row.Scan(&persons_name)
	return persons_name, err
}

const listPersons = `-- name: ListPersons :many
SELECT id, kind, persons_name, origins, programming_languages, tools, linkedin, github, personal, foreign_languages, fav_food, fav_drink, fav_programming_language, thinking_about, hobbies FROM person
ORDER BY id
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Person{}
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.PersonsName,
			&i.Origins,
			&i.ProgrammingLanguages,
			&i.Tools,
			&i.Linkedin,
			&i.Github,
			&i.Personal,
			&i.ForeignLanguages,
			&i.FavFood,
			&i.FavDrink,
			&i.FavProgrammingLanguage,
			&i.ThinkingAbout,
			&i.Hobbies,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :execresult
UPDATE person
SET kind = ?, persons_name = ?, origins = ?, programming_languages = ?, tools = ?, 
linkedin = ?, github = ?, personal = ?, foreign_languages = ?, fav_food = ?, 
fav_drink = ?, fav_programming_language = ?, thinking_about = ?, hobbies = ?
WHERE person.id = ?
`

type UpdatePersonParams struct {
	Kind                   string `json:"kind"`
	PersonsName            string `json:"persons_name"`
	Origins                string `json:"origins"`
	ProgrammingLanguages   string `json:"programming_languages"`
	Tools                  string `json:"tools"`
	Linkedin               string `json:"linkedin"`
	Github                 string `json:"github"`
	Personal               string `json:"personal"`
	ForeignLanguages       string `json:"foreign_languages"`
	FavFood                string `json:"fav_food"`
	FavDrink               string `json:"fav_drink"`
	FavProgrammingLanguage string `json:"fav_programming_language"`
	ThinkingAbout          string `json:"thinking_about"`
	Hobbies                string `json:"hobbies"`
	ID                     int64  `json:"id"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePerson,
		arg.Kind,
		arg.PersonsName,
		arg.Origins,
		arg.ProgrammingLanguages,
		arg.Tools,
		arg.Linkedin,
		arg.Github,
		arg.Personal,
		arg.ForeignLanguages,
		arg.FavFood,
		arg.FavDrink,
		arg.FavProgrammingLanguage,
		arg.ThinkingAbout,
		arg.Hobbies,
		arg.ID,
	)
}
